import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
import datetime
import requests
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class MistralAPI:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api.mistral.ai/v1/chat/completions"

    async def generate_response(self, prompt: str) -> str:
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        data = {
            "model": "mistral-tiny",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.7,
            "max_tokens": 2000
        }

        try:
            response = requests.post(
                self.base_url,
                headers=headers,
                json=data,
                timeout=30
            )
            response.raise_for_status()
            return response.json()["choices"][0]["message"]["content"]
        except Exception as e:
            logger.error(f"Mistral API Error: {e}")
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


class TelegramBot:
    def __init__(self, token: str):
        self.application = Application.builder().token(token).build()
        self.mistral = MistralAPI(api_key="dihA4RmtkbZcEvOwdTRpD0xlNLcgbQS5")
        self.db = Database("sqlite:///users.db")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("subscribe", self.subscribe))
        self.application.add_handler(CommandHandler("support", self.support))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    def get_back_button(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        return [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='start')]

    async def start(self, update: Update, context: CallbackContext):
        user = update.effective_user
        user_id = user.id

        if not self.db.user_exists(user_id):
            self.db.add_user(
                user_id,
                username=user.username,
                free_requests_left=10,
                last_request_date=datetime.date.today(),
                is_subscribed=False
            )
            welcome_msg = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                "–Ø - —á–∞—Ç-–±–æ—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é Mistral AI.\n"
                "üîπ –¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å\n"
                "üîπ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ (/subscribe)\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!"
            )
        else:
            user_data = self.db.get_user(user_id)
            requests_left = user_data.free_requests_left
            welcome_msg = (
                f"üîÑ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!\n\n"
                f"üîπ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {requests_left}\n"
                f"üîπ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if user_data.is_subscribed else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
                f"üîπ–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!\n\n"
                "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? /help"
            )

        keyboard = [
            [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='subscribe')],
            [InlineKeyboardButton("üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')],
            [InlineKeyboardButton("üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data='donate')],
            self.get_back_button()
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await self.send_or_edit_message(update, welcome_msg, reply_markup)

    async def help(self, update: Update, context: CallbackContext):
        help_text = (
            "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
            "üîπ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "üîπ /subscribe - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ\n"
            "üîπ /support - –°–≤—è–∑—å —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
            "‚ùì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n"
            "- 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å\n"
            "- –°–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –≤ 00:00\n\n"
            "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç:\n"
            "- –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
            "- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É\n\n"
            "üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /donate"
        )

        reply_markup = InlineKeyboardMarkup([self.get_back_button()])
        await self.send_or_edit_message(update, help_text, reply_markup)

    async def subscribe(self, update: Update, context: CallbackContext):
        user_id = update.effective_user.id
        user = self.db.get_user(user_id)

        if user.is_subscribed:
            expiry_date = user.subscription_expiry
            reply_markup = InlineKeyboardMarkup([self.get_back_button()])
            await self.send_or_edit_message(
                update,
                f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiry_date}!",
                reply_markup
            )
            return

        keyboard = [
            [InlineKeyboardButton("üí∞ –ú–µ—Å—è—Ü - 199 —Ä—É–±.", callback_data='sub_month')],
            [InlineKeyboardButton("üíé –ì–æ–¥ - 1599 —Ä—É–±. (—ç–∫–æ–Ω–æ–º–∏—è 33%)", callback_data='sub_year')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')],
            self.get_back_button()
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await self.send_or_edit_message(
            update,
            "üéü –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup
        )

    async def support(self, update: Update, context: CallbackContext):
        support_msg = (
            "üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:\n\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @Mistral_support\n\n"
            "–ú—ã –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
        )
        reply_markup = InlineKeyboardMarkup([self.get_back_button()])
        await self.send_or_edit_message(update, support_msg, reply_markup)

    async def send_or_edit_message(self, update: Update, text: str, reply_markup=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)

    async def handle_message(self, update: Update, context: CallbackContext):
        user_id = update.effective_user.id
        user = self.db.get_user(user_id)
        message_text = update.message.text

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        if not user.is_subscribed:
            if user.free_requests_left <= 0:
                keyboard = [
                    [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='subscribe')],
                    self.get_back_button()
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    "üö´ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!\n\n"
                    "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:",
                    reply_markup=reply_markup
                )
                return
            self.db.update_user(user_id, {'free_requests_left': user.free_requests_left - 1})

        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

        try:
            response = await self.mistral.generate_response(message_text)
            response = response[:4000] + "..." if len(response) > 4000 else response

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫ –æ—Ç–≤–µ—Ç—É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            reply_markup = InlineKeyboardMarkup([self.get_back_button()])
            await update.message.reply_text(response, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error: {e}")
            reply_markup = InlineKeyboardMarkup([self.get_back_button()])
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=reply_markup)

    async def button_callback(self, update: Update, context: CallbackContext):
        query = update.callback_query
        await query.answer()  # –í–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è callback

        user_id = query.from_user.id
        data = query.data

        logger.info(f"Received callback: {data} from user {user_id}")

        if data == 'subscribe':
            await self.subscribe(update, context)
        elif data == 'support':
            await self.support(update, context)
        elif data == 'donate':
            keyboard = [
                [InlineKeyboardButton("BTC", callback_data='donate_btc')],
                [InlineKeyboardButton("ETH", callback_data='donate_eth')],
                [InlineKeyboardButton("–ÆMoney", callback_data='donate_ym')],
                [InlineKeyboardButton("USDT", callback_data='donate_usdt')],
                self.get_back_button()
            ]
            await query.edit_message_text(
                "üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        elif data == 'donate_btc':
            await query.edit_message_text(
                "BTC: bc1qpd5993v84uzn54kwygvw2nk6rdun2997326s4n\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! üôè",
                reply_markup=InlineKeyboardMarkup([self.get_back_button()])
            )
        elif data == 'donate_eth':
            await query.edit_message_text(
                "ETH: 0x41C220fFE11d76B7Fd48F712B4B06A1955622Dd3\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! üôè",
                reply_markup=InlineKeyboardMarkup([self.get_back_button()])
            )
        elif data == 'donate_ym':
            await query.edit_message_text(
                "–ÆMoney: 4100116764799228\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! üôè",
                reply_markup=InlineKeyboardMarkup([self.get_back_button()])
            )
        elif data == 'donate_usdt':
            await query.edit_message_text(
                "USDT(trx20): TLqAx9wR9wYnEWeBxchfJQtYPjP2D6St3E\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! üôè",
                reply_markup=InlineKeyboardMarkup([self.get_back_button()])
            )
        elif data.startswith('sub_'):
            period = data.split('_')[1]
            days = 30 if period == 'month' else 365
            expiry_date = datetime.date.today() + datetime.timedelta(days=days)

            self.db.update_user(user_id, {
                'is_subscribed': True,
                'subscription_expiry': expiry_date,
                'free_requests_left': 999
            })

            await query.edit_message_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {expiry_date}!\n\n"
                "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã!",
                reply_markup=InlineKeyboardMarkup([self.get_back_button()])
            )
        elif data == 'cancel':
            await query.edit_message_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=InlineKeyboardMarkup([self.get_back_button()])
            )
        elif data == 'start':
            await self.start(update, context)

    def run(self):
        self.application.run_polling()


if __name__ == '__main__':
    bot = TelegramBot("7838287573:AAGU-gNBWn6bXsc2sLyJ7B7d7j6kkVjOY6Q")
    bot.run()